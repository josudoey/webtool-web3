{"version":3,"file":"7e1d22d3adae6693e31d.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA,qBAAqB,qCAAqC;AAC1D;AACA;AACA;AACA,QAAQ,qCAAqC;AAC7C;AACA;AACA;AACA,YAAY,SAAS,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,oBAAoB;AACjD,0BAA0B,4BAA4B;AACtD,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,6BAA6B,oBAAoB;AACjD,0BAA0B,wBAAwB;AAClD,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,6BAA6B,oBAAoB;AACjD,0BAA0B,uBAAuB;AACjD,mBAAmB;AACnB;AACA;AACA;AACA,2BAA2B,2BAA2B;AACtD;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,mBAAmB;AACnB,iBAAiB;AACjB;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,mBAAmB;AACnB,iBAAiB;AACjB;AACA;AACA;AACA,6BAA6B,oBAAoB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,qBAAqB;AACrB,mBAAmB;AACnB;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,mBAAmB;AACnB,iBAAiB;AACjB;AACA;AACA;AACA,6BAA6B,oBAAoB;AACjD;AACA;AACA;AACA,uBAAuB;AACvB,qBAAqB;AACrB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2CAA2C;AAClE,kBAAkB,oCAAoC;AACtD;AACA;AACA;AACA,GAAG;AACH;AACA;;;;;;;;;;;;;;;;;AClIsD;;AAEtD,iEAAe;AACf,QAAQ;AACR,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,cAAc,WAAW;AACzB;AACA,KAAK;AACL;AACA;AACA;AACA,2CAA2C,+BAA+B;AAC1E,KAAK;AACL;AACA,2CAA2C,wBAAwB;AACnE,KAAK;AACL;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA,cAAc,WAAW;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ;AACR;AACA;AACA,KAAK;;AAEL;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC","sources":["webpack://webtool-web3/./vue/pages/home/render.pug","webpack://webtool-web3/./vue/pages/home/index.mjs"],"sourcesContent":["var render = function () {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"container-fluid px-0\" }, [\n    _vm._m(0),\n    _c(\n      \"div\",\n      { staticClass: \"container-fluid px-0\" },\n      [\n        _c(\n          \"b-card\",\n          { attrs: { \"no-body\": \"\" } },\n          [\n            _c(\"b-card-title\", [_vm._v(\"ethereum\")]),\n            _c(\n              \"b-card-body\",\n              [\n                _c(\n                  \"b-btn\",\n                  {\n                    attrs: { variant: \"primary\" },\n                    on: { click: _vm.requestAccounts },\n                  },\n                  [_vm._v(\"requestAccounts\")]\n                ),\n                _c(\n                  \"b-btn\",\n                  {\n                    attrs: { variant: \"primary\" },\n                    on: { click: _vm.getAccounts },\n                  },\n                  [_vm._v(\"getAccounts\")]\n                ),\n                _c(\n                  \"b-btn\",\n                  {\n                    attrs: { variant: \"primary\" },\n                    on: { click: _vm.getBalance },\n                  },\n                  [_vm._v(\"getBalance\")]\n                ),\n                _c(\"b-form-input\", {\n                  attrs: { placeholder: \"to address\" },\n                  model: {\n                    value: _vm.transferToAddress,\n                    callback: function ($$v) {\n                      _vm.transferToAddress = $$v\n                    },\n                    expression: \"transferToAddress\",\n                  },\n                }),\n                _c(\"b-form-input\", {\n                  attrs: { placeholder: \"value\" },\n                  model: {\n                    value: _vm.transferValue,\n                    callback: function ($$v) {\n                      _vm.transferValue = $$v\n                    },\n                    expression: \"transferValue\",\n                  },\n                }),\n                _c(\n                  \"b-btn\",\n                  {\n                    attrs: { variant: \"primary\" },\n                    on: {\n                      click: function ($event) {\n                        return _vm.transfer(\n                          _vm.transferToAddress,\n                          _vm.transferValue\n                        )\n                      },\n                    },\n                  },\n                  [_vm._v(\"transfer\")]\n                ),\n                _c(\"b-form-input\", {\n                  attrs: { placeholder: \"message\" },\n                  model: {\n                    value: _vm.message,\n                    callback: function ($$v) {\n                      _vm.message = $$v\n                    },\n                    expression: \"message\",\n                  },\n                }),\n                _c(\n                  \"b-btn\",\n                  {\n                    attrs: { variant: \"primary\" },\n                    on: {\n                      click: function ($event) {\n                        return _vm.personalSign(_vm.message)\n                      },\n                    },\n                  },\n                  [_vm._v(\"personalSign\")]\n                ),\n              ],\n              1\n            ),\n          ],\n          1\n        ),\n        _c(\"h5\", [_vm._v(\"account address\")]),\n        _c(\n          \"ul\",\n          _vm._l(_vm.accounts, function (account) {\n            return _c(\"li\", [_vm._v(_vm._s(account))])\n          }),\n          0\n        ),\n      ],\n      1\n    ),\n  ])\n}\nvar staticRenderFns = [\n  function () {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"nav\", { staticClass: \"navbar navbar-dark bg-dark\" }, [\n      _c(\"div\", { staticClass: \"navbar-brand d-flex\" }, [\n        _c(\"div\", [_vm._v(\"Webtool Web3\")]),\n      ]),\n    ])\n  },\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import { render, staticRenderFns } from './render.pug'\n\nexport default {\n  render,\n  staticRenderFns,\n  data () {\n    return {\n      ethereum: null,\n      web3: null,\n      accounts: [],\n      balance: '',\n      message: '',\n      signature: '',\n      transferToAddress: '',\n      transferValue: ''\n    }\n  },\n  mounted () {\n    // see https://web3js.readthedocs.io/en/v1.5.2/getting-started.html#adding-web3-js\n    this.ethereum = window.ethereum\n  },\n  updated () {\n  },\n  methods: {\n    async request (opts) {\n      // see https://docs.metamask.io/guide/provider-migration.html#replacing-window-web3\n      const { ethereum } = this\n      return ethereum.request(opts)\n    },\n    async requestAccounts () {\n      // see https://docs.metamask.io/guide/rpc-api.html#permissions\n      // see https://docs.metamask.io/guide/accessing-accounts.html\n      this.accounts = await this.request({ method: 'eth_requestAccounts' })\n    },\n    async getAccounts () {\n      this.accounts = await this.request({ method: 'eth_accounts' })\n    },\n    async getBalance (address) {\n      const { ethereum } = this\n      address = address || ethereum.selectedAddress\n      const balance = this.balance = await this.request({\n        method: 'eth_getBalance',\n        params: [address]\n      })\n      console.log(address, balance)\n    },\n    async transfer (toAddress, value) {\n      // see https://docs.metamask.io/guide/sending-transactions.html#example\n      const { ethereum } = this\n\n      try {\n        const transactionParameters = {\n          to: toAddress, // Required except during contract publications.\n          from: ethereum.selectedAddress, // must match user's active address.\n          value: value,\n          data: ''\n        }\n        console.log(transactionParameters)\n\n        const transactionHash = await this.request({\n          method: 'eth_sendTransaction',\n          params: [transactionParameters]\n        })\n        console.log(transactionHash)\n      } catch (err) {\n        console.log(err)\n      }\n    },\n\n    async personalSign (message, address) {\n      const { ethereum } = this\n      address = address || ethereum.selectedAddress\n      const payload = {\n        method: 'personal_sign', params: [message, address]\n      }\n      console.log(payload)\n\n      const signature = await ethereum.request(payload)\n      console.log(signature)\n    }\n\n  }\n}\n"],"names":[],"sourceRoot":""}